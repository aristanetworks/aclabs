! Command: show running-config
! device: EOS1 (cEOSLab, EOS-4.35.0F-43819090.eostrunkceos (engineering build))
!
no aaa root
!
username admin privilege 15 role network-admin secret sha512 $6$FRYUzIIRJYeDGKNG$YHsnsP9ABKgEluHDFPzSahcxrw4CqcZCkfesnhSWy0LhIXnq8lQ5p51Kjxc1UorVOUqIfYD.9XUHRcekBFfHp/
!
management api http-commands
   no shutdown
   !
   vrf MGMT
      no shutdown
!
switchport default mode routed
!
no service interface inactive port-id allocation disabled
!
transceiver qsfp default-mode 4x10G
!
interface defaults
   mtu 9214
!
service routing protocols model multi-agent
!
hostname EOS1
!
spanning-tree mode mstp
!
system l1
   unsupported speed action error
   unsupported error-correction action error
!
vrf instance MGMT
!
management api gnmi
   transport grpc default
      vrf MGMT
!
management api netconf
   transport ssh default
      vrf MGMT
!
aaa authorization exec default local
!
interface Ethernet1
   no switchport
   ip address 20.1.2.1/24
!
interface Ethernet2
   no switchport
   ip address 20.1.4.1/24
!
interface Ethernet3
   no switchport
   ip address 20.1.6.1/24
!
interface Ethernet4
   no switchport
   ip address 20.1.5.1/24
!
interface Loopback0
   ip address 1.0.0.1/24
!
interface Loopback1
   ip address 1.1.1.1/24
!
interface Loopback2
   ip address 1.2.2.1/24
!
interface Loopback3
   ip address 1.3.3.1/24
!
interface Management0
   vrf MGMT
   ip address 172.100.100.101/24
!
ip routing
no ip routing vrf MGMT
!
ip community-list DIA-CUSTOMER-ROUTE-SET permit 100:4000
!
ip prefix-list PL-AS500
   seq 10 permit 5.0.0.0/8 le 24
!
ip prefix-list PL-AS600
   seq 10 permit 6.0.0.0/8 le 24
!
ip route vrf MGMT 0.0.0.0/0 172.100.100.1
!
router bgp 100
   router-id 1.0.0.1
   distance bgp 20 200 200
   neighbor default send-community
   neighbor 20.1.2.2 remote-as 200
   neighbor 20.1.2.2 description EOS2
   neighbor 20.1.4.4 remote-as 400
   neighbor 20.1.4.4 description EOS4
   neighbor 20.1.5.5 remote-as 500
   neighbor 20.1.5.5 description EOS5
   neighbor 20.1.6.6 remote-as 600
   neighbor 20.1.6.6 description EOS6
   redistribute connected
   !
   address-family ipv4
      neighbor 20.1.2.2 rcf in TRANSIT_PEERING_IN()
      neighbor 20.1.4.4 rcf in TRANSIT_PEERING_IN()
      neighbor 20.1.5.5 rcf in DIA_INBOUND( prefix_list_v4 PL-AS500 )
      neighbor 20.1.5.5 rcf out DIA_PARTIAL_ROUTES_OUTBOUND()
      neighbor 20.1.5.5 default-originate always
      neighbor 20.1.6.6 rcf in DIA_INBOUND( prefix_list_v4 PL-AS600 )
!
router general
   control-functions
      code unit DEFAULT_ROUTE
      ########################################################################################
      # Called function: Evaluate if prefix is an IPv4 or IPv6 Default Route
      ########################################################################################
      function DEFAULT_ROUTE() {
          return prefix is 0.0.0.0/0 or prefix is ::/0;
      }
      EOF
      code unit DIA_CUSTOMER_COMMUNITIES_ARE_PRESENT
      ########################################################################################
      # Called function: Evaluate if Standard Communities used for Cust peering are present
      ########################################################################################
      function DIA_CUSTOMER_COMMUNITIES_ARE_PRESENT() {
          return community has_any {100:4000, 100:4001, 100:4002, 100:4003};
      }
      EOF
      code unit DIA_DEFAULT_ONLY_OUTBOUND
      ########################################################################################
      # Point of Attachment Function: Outbound to "Default-Only" Customers
      ########################################################################################
      function DIA_DEFAULT_ONLY_OUTBOUND() {
          if DEFAULT_ROUTE() {
              return true;
          } else {
              return false;
          }
      }
      EOF
      code unit DIA_INBOUND
      ########################################################################################
      # Point of Attachment Function: Inbound policy for DIA Customers
      ########################################################################################
      function DIA_INBOUND( prefix_list_type $prefixlist ) {
          if prefix match $prefixlist {
              community add community_list DIA-CUSTOMER-ROUTE-SET;
              if LOCAL_PREF_COMMUNITY(75) {
                  local_preference = 75;
              } else if LOCAL_PREF_COMMUNITY(80) {
                  local_preference = 80;
              } else if LOCAL_PREF_COMMUNITY(85) {
                  local_preference = 85;
              } else if LOCAL_PREF_COMMUNITY(90) {
                  local_preference = 90;
              } else if LOCAL_PREF_COMMUNITY(100) {
                  local_preference = 100;
              } else if LOCAL_PREF_COMMUNITY(105) {
                  local_preference = 105;
              }
              return true;
          } else {
              return false;
          }
      }
      EOF
      code unit DIA_PARTIAL_ROUTES_OUTBOUND
      ########################################################################################
      # Point of Attachment Function: Outbound to "Default+Customer Routes" DIA Customer
      ########################################################################################
      function DIA_PARTIAL_ROUTES_OUTBOUND() {
          if DEFAULT_ROUTE() or DIA_CUSTOMER_COMMUNITIES_ARE_PRESENT() {
              return true;
          } else {
              return false;
          }
      }
      EOF
      code unit INVALID_PREFIX_LENGTH
      ########################################################################################
      # Called function: Evaluate if Prefix length is less than /8 or greater than /24
      ########################################################################################
      function INVALID_PREFIX_LENGTH() {
          return prefix.length < 8 or prefix.length > 24;
      }
      EOF
      code unit LOCAL_PREF_COMMUNITY
      ########################################################################################
      # Called function: Evaluate if the 100:$ARG Local Pref Community is Present
      ########################################################################################
      function LOCAL_PREF_COMMUNITY( int_type $lp_value ) {
          return community has_any { 100:$lp_value };
      }
      EOF
      code unit TRANSIT_PEERING_IN
      ########################################################################################
      # Point of Attachment Function: Transit Peering Policy
      ########################################################################################
      function TRANSIT_PEERING_IN() {
        if ( as_path.origin_as is 300 and ( as_path has_none { 200 } or prefix covered_by 3.1.0.0/16 ) ) {
                local_preference += 100;
                community add { 100:999 };
        }
        if input.community is empty {
                community add { 100:1000 };
        }
          return true;
      }
      EOF
      code unit TRANSIT_PEER_COMMUNITY_IS_PRESENT
      ########################################################################################
      # Called function: Evaluate if the Standard Community used for transit peers is present
      ########################################################################################
      function TRANSIT_PEER_COMMUNITY_IS_PRESENT() {
          return community has_any { 100:1000 };
      }
      EOF
!
router multicast
   ipv4
      software-forwarding kernel
   !
   ipv6
      software-forwarding kernel
!
end
