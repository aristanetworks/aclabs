---
# This workflow is triggered by the parent workflow and must not be triggered directly.

name: Reusable build container workflow

env:
  # BUILDX_NO_DEFAULT_ATTESTATIONS must be set to build only arm64 and amd64 images.
  # The devcontainers/ci@v0.3 build will fail if this env variable is not set.
  BUILDX_NO_DEFAULT_ATTESTATIONS: 1

on:
  workflow_call:
    inputs:
      container_name:
        required: false
        type: string
        default: lab-base
      image_tags:
        required: false
        type: string
      platform:
        required: false
        type: string
        default: linux/arm64/v8,linux/amd64
      from_image:
        required: false
        type: string
        default: ghcr.io/aristanetworks/avd/universal
      from_variant:
        required: false
        type: string
        default: latest
      username:
        required: false
        type: string
        default: avd
      user_id:
        required: false
        type: string
        default: 1000
      group_id:
        required: false
        type: string
        default: 1000
      git_init:
        required: false
        type: boolean
        default: true
      clab_version:
        required: false
        type: string
      container_revision:
        required: false
        type: string
        default: latest

jobs:
  build_image:
    runs-on: ubuntu-22.04
    steps:
      - name: Starting container build
        run: echo "Starting container build. Be patient. 🐢"
      - name: Checkout code ✅
        uses: actions/checkout@v4

      - name: Build image tags 🏷️
        id: build-tags
        run: |
          if [ -z "${{ inputs.image_tags }}" ]; then
            echo "No image tags provided. Building tags."
            echo "image_tags=${{ inputs.from_variant }}-clab${{ inputs.clab_version }}-rev${{ inputs.container_revision }}" >> $GITHUB_OUTPUT
          else
            echo "Using provided image tags."
            echo "image_tags=${{ inputs.image_tags }}" >> $GITHUB_OUTPUT
          fi

      - name: Convert Github repository name to lowercase ⬇️
        id: gh_repo
        run: echo "name_lowcase=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      - name: Setup QEMU for multi-arch builds 🏗️
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ inputs.platform }}

      - name: Setup Docker buildX for multi-arch builds 🏗️
        uses: docker/setup-buildx-action@v3

      - name: Login to the container registry 🗝️
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if image already exists on container registry 🕵️
        id: check-image
        run: |
          echo "exit_code=0" >> $GITHUB_OUTPUT
          if [ "${{ inputs.container_name }}" == "dev" ]; then
            # always rebuild dev image, but check if already exists for other images
            echo "exit_code=1" >> $GITHUB_OUTPUT
          else
            IFS=',' read -ra image_tags <<< ${{ steps.build-tags.outputs.image_tags }}
            for image_tag in "${image_tags[@]}"; do
              echo "Checking if ghcr.io/${{ steps.gh_repo.outputs.name_lowcase }}/${{ inputs.container_name }}:$image_tag already exists."
              docker manifest inspect ghcr.io/${{ steps.gh_repo.outputs.name_lowcase }}/${{ inputs.container_name }}:$image_tag || echo "exit_code=1" >> $GITHUB_OUTPUT
            done
          fi

      - name: Pre-build dev container image 🔨
        uses: devcontainers/ci@v0.3
        # Only build and push the image if at least one of the image tags does not exist.
        if: steps.check-image.outputs.exit_code != 0
        env:
          FROM_IMAGE: ${{ inputs.from_image }}
          FROM_VARIANT: ${{ inputs.from_variant }}
          USERNAME: ${{ inputs.username }}
          UID: ${{ inputs.user_id }}
          GID: ${{ inputs.group_id }}
          CLAB_VERSION: ${{ inputs.clab_version }}
          CEOS_LAB_VERSION_ARG: ${{ inputs.ceos_lab_version }}
          GIT_INIT_ARG: ${{ inputs.git_init }}
        with:
          subFolder: containers/${{ inputs.container_name }}
          imageName: ghcr.io/${{ steps.gh_repo.outputs.name_lowcase }}/${{ inputs.container_name }}
          imageTag: ${{ steps.build-tags.outputs.image_tags }}
          platform: ${{ inputs.platform }}
          push: always
